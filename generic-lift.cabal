name:                generic-lift
version:             1.0.0
synopsis:            Lift any pure function over any Applicative stack.
description:
  This package contains a family of functions based on familiar 'Applicative',
  'Functor', 'Traversable', and 'Foldable' methods with the special property
  that they operate on stacks of arbitrary depth.
  .
  For example, 'liftAll' is like the 'liftA*' functions except it can lift a
  function through multiple layers of @Applicative@s instead of just one. Additionally,
  it has the ability to lift a function of arbitrary arity.
  .
  Usage of the term \"stack\" in this documentation refers to something like
  .
  > Maybe [Either Bool [Int]]
  .
  where @Int@ is embedded in a nesting of types that all share some common
  interface, such as @Applicative@.
  .
  You will generally want to have <https://gitlab.haskell.org/ghc/ghc/wikis/type-application TypeApplications> turned on so that you
  can easily supply a couple of type arguments that the compiler is not able to
  infer on it's own. The first of these is the type for the stack and the
  second is the type of the focused value within that stack.
  In the case of 'liftAll', use the type of the first argument to the lifted function.
  For example:
  .
  >>> :set -XTypeApplications
  >>> liftAll @[Maybe [Int]] @Int (+) [Just [3]] [Just [6, 7]]
  [Just [9,10]]

  >>> data Foo = Foo Int String Double deriving Show
  >>> liftAll @[[Int]] @Int Foo [[2]] [["string"]] [[5]]
  [[Foo 2 "string" 5.0]]

  >>> fmapAll @[Maybe String] @String length [Just "string"]
  [Just 6]

  >>> traverseAll @(Either String [Int]) @Int print (Right [1,2,3])
  1
  2
  3
  Right [(),(),()]
  .
  (Additional examples are in the haddocks.)
  .
  By turning on @FlexibleContexts@, @TypeFamilies@, and @AllowAmbiguousTypes@,
  you can often forego supplying one or both of these type arguments.
homepage:            https://github.com/aaronallen8455/generic-lift#readme
license:             BSD3
license-file:        LICENSE
author:              Aaron Allen
maintainer:          aaronallen8455@gmail.com
copyright:           2019 Aaron Allen
category:            Control, Utils
build-type:          Simple
extra-source-files:  README.md
cabal-version:       >=1.10

library
  hs-source-dirs:      src
  exposed-modules:     Control.Lift
  build-depends:       base >= 4.7 && < 5
  default-language:    Haskell2010

source-repository head
  type:     git
  location: https://github.com/aaronallen8455/generic-lift
